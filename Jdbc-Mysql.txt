Collection of data -> Database

1. Data Organsiation will be good

2. Permanant Storage

3. Easy access and from anywhere I can access if you were working server/cloud databases

4.Secure 


 SQL :( Structured Query Language) => Declarative -> You just mention what you want and language will take care of everything.

  Operations that can be performed on databases:

  C -> create

  R -> read 

  U  -> update

  D  -> delete

   DBMS -> Database Management Systems
==========

 DBMS is a software where we interact to manage my database operations

Example:

  ORACLE, MYSQL, POSTGRESSQL,MS SQL SERVER e.t.c.,

  IDE : MYSQL


Types of Databases:
======================

1. Relational/SQL Db

The data will be stored in the form of Tables(Rows and columns)
Ex:   ORACLE, MYSQL, POSTGRESSQL,MS SQL SERVER e.t.c.,

2. Non-Relational/ NOSql Db -> in the form of JSON/Scripting format
Ex: Mongodb, Cassandradb....e.tc.,

{
    name:Roshjjp[
    id:{

   }

}

SQL Commands:
==============

DDL

DML

DQL

DCL

TCL


   DDL( Data definition language) -> When you want work with structure of the table :
========================================
   1. create database
      create table
 
   2. alter table
      
   3. drop table
      drop database
  
   4. truncate table


   sl : read differences between drop and truncate, delete?
         Work with ddl commands ?         

   DML( Data Manipulation Language) -> When you wanted to change the data in the table
-=====================================

   1. insert 
   
   2. Update

   3. delete   
   
  DCL( Data control Language) -> When you wanted to give or revoke permissions to data
========================================

  1. grant
  
  2. revoke

 TCL ( Transaction Control Language) -> When you wanted to work with Transactions 
=====================================

  1. commit

  2. rollback

 DQL ( Data Query Language) -> When you wanted to fetch the data
==============================

  1. select


  We will be mainly concentrating on : DDL, DML, DQL 
 


  create, alter, drop , truncate - DDL

  insert, update, delete - DML

  select - DQL



create database peters; // for creating database
 
show databases; //for showing all the databases

use peters; //for using the database

create table Student(stud_id int,stud_name varchar(20), marks int); //for creating the table inside the database

insert into Student(stud_id,stud_name) values(1,'Roshith'); //for insertion of values into only some of the columns

insert into Student values(2,"Varshini",100); //for insertion of values in all the columns

insert into Student values (3,"Jaya Prakash",70),(4,"Navin",80); //insertion of multiple values in the same query.

select marks from Student; //if ib wanted to get only marks column

select * from Student; //fetching all the rows from the table

Aggregate functions :
================

select min(marks) from Student;

select avg(marks) from Student;

select max(marks) from Student;

select count(stud_id) from Student;

select sum(marks) from Student;

select marks from Student where stud_id=101;


select stud_name from Student where marks = (select max(marks) from Student); //Nested Query

Update Student set marks = 90 where stud_id = 1; // Updating a specific column

select * from Student;

alter table Student add column skill varchar(20); //adding another column

select * from Student;

update Student set skill = "java"; //updating all the colulmns at the same time

select * from Student;

delete from Student where stud_id=1; //delete a specific row

select * from Student;

drop table Student; //delete whole table

select * from Student;

show tables; //to show all the tables that were there in the database


insert -> into
update -> set
delete -> fro

MySQL Constraints
====================
The constraint in MySQL is used to specify the rule that allows or restricts what values/data will be stored in the table.

It helps to limit the type of data that will be inserted inside the table.

Types of MySQL Constraints
==========================
Constraints in MySQL is classified into two types:

Column Level Constraints: These constraints are applied only to the single column that limits the type of particular column data.

Table Level Constraints: These constraints are applied to the entire table that limits the type of data for the whole table.

CREATE TABLE new_table_name (  
    col_name1 datatype constraint,  
    col_name2 datatype constraint,  
    col_name3 datatype constraint,  
    .........  
);  

The following are the most common constraints used in the MySQL:

NOT NULL
CHECK
DEFAULT
PRIMARY KEY
AUTO_INCREMENT
UNIQUE
INDEX
ENUM
FOREIGN KEY

NOT NULL Constraint
=========================
This constraint specifies that the column cannot have NULL or empty values. The below statement creates a table with NOT NULL constraint.

mysql> CREATE TABLE Student(Id INTEGER, LastName TEXT NOT NULL, FirstName TEXT NOT NULL, City VARCHAR(35));  
Execute the queries listed below to understand how it works:

mysql> INSERT INTO Student VALUES(1, 'Hanks', 'Peter', 'New York');  
  
mysql> INSERT INTO Student VALUES(2, NULL, 'Amanda', 'Florida');   


how to install mysql   ?
=================

    
Firstly go to control panel through your desktop search and uninstall if any mysql is already there.

  1. Go to google and type mysql

   2. go to official website of mysql and go to downloads

   3. Go below and click on mysql community(GPL) downloads

   4. Click on mysql installer for windows

    5. click download for 2nd one which works for both 32 bit and 64 bit  (i.e., with 437 MB)

    6. Click on no thanks, just start my download.

    7.Once it is download, double click on it to install, Once its loaded select  setup type as custom.

   8.Click next and go to available products and select mysql version by clicking on + symbol and drag it into side window using green     arrow.

   9. Then, in applications do the same and select mysql workbench version and drag it into side window using green arrow.

  10. Do the same for selecting shell and click on next.

  11. Now, on the next page click on execute and click on next until password setup page with default settings.

  12. put password for mysql as root123 and then keep the default settings and click on next and then execute, next, finish. 

Setting up environmental variables for mysql :
================================

 1. In program files, go to mysql folder > mysql server > bin

 2. Copy the path same like we did for java.

 3. Now open enviromental variables dialog box and go to Path section and Paste the bin path there and click on ok, before that see if there is any old mysql bin path is there, if it is there already, delete that and place the new one.

no go to cmd and type the following commands :

mysql --version

mysql -u root -p

enter password : root123

now the server of mysql is started in cmd.

Agenda :
==========

What is JDBC ?

Why is it used ?

steps to develop java and database connectivity application.

Then we will code the jdbc application.


JDBC 
==========

JDBC stands for java database connectivity.

As the name only indicates it provides connection between java application and relational database.

Jdbc is a technology used to communicate with database from java application.

 It is a part of JavaSE (Java Standard Edition). 

   Java SE => core java, JDBC
  Java EE => Servlets, JSP,Spring,Springboot
  Java ME => Mobile applications

  Jdbc API is a java API, that can access any kind of tabular data especially stored in RDBMS

  1. java.sql package

  2.javax.sql package


JDBC API uses JDBC drivers to connect with the database

(show diagram)

   javap java.sql.DriverManager

   javap java.sql.Connection

  Driver :
  ======

   A driver is a software and it is used to connect application and database.

Drivers are basically divided into 2 categories :

1. Open Database Connectivity Drivers

2. JDBC Drivers

ODBC drivers are used to connect non java applications(C,C#,.Net,python) and databases.

ODBC cannot understand java instructions because ODBC developed before java technology.

To solve the above situation, JDBC drivers are introduced :


There are four types of JDBC drivers:

 1. JDBC-ODBC Bridge Driver (or) Type-1 driver
  2. JDBC Native API Driver (or) Type-2 driver 
  3. Network Protocol Driver (or) Type-3 driver and
  4. Thin Driver (or) JDBC 100 % Pure Java Driver (or) Type-4 driver.

There are 2 ways to connect java application and database :

1. By using JDBC and ODBC drivers.

2.By using only JDBC drivers.


Mostly, we will use Type-2 or Type-4 drivers as many drivers are there for each variety of database.

With Type-1, since it acts as translator, communication becomes very slow.

1.) Jdbc- Odbc Bridge Driver :
=========================

Communication becomes very slow.

So, at JDK 1.8 only, it is removed.

Driver class name :
==============
sun.jdbc.odbc.JdbcOdbcDriver

Driver location :
================
rt.jar file in JDK 1.7 and below versions

Note :   This driver removed from JDK 1.7 and below versions.
=====

JAR file location :
=================

C:/Program files/ Java/ JDK 1.7/jre/lib

Driver vendor :
================
Sun microsystems

url to access the driver :
=====================
jdbc : odbc : dsn( data source name)

Note: Type-1 drivers are outdated in 2014 itself since they are developed in C language.

Type-1 driver architecture :
====================

(show diagram)

Type - 1 driver functionality :
====================

It converts java instructions to odbc understandable format.(Translator)

Advantages of Type-1 driver :
=====================

1. It is very easy to connect.

2. Only one driver, that supports all odbc enabled databases.

Disadvantages of Type-1 driver :
======================

1. Performance overhead since java calls should go through via jdbc and odbc drivers.

2. DSN creation required.

3.Database client software needs to be installed on local machine.

4. It is not suitable for applets(GUI) because applets has the following security restrictions :

a). Applets cannot read from local disk( DSN will be in hard disk)

b). Applets cannot write data to local dcisk.

c.) Applets cannot open new network connection other than the server from which it is loaded.

Odbc tool is common for all the databases.

2. Type - 2 Driver (JDBC Native API Driver)
===================================
Type- 2 driver is also called as Partial java driver (or) partly java native driver.

Type-2 driver are developed in java language and native languages.

Type - 2 driver class name for oracle database :
=================================

oracle.jdbc.driver.OracleDriver

Driver vendor :
===============

oracle corporation.

Driver location :
=================

ojdbc14.jar file in oracle log express edition.

ojdbc6_g.jar file in oracle 11g express edition.

URL to access Type-2 driver :
======================

jdbc : oracle : oci8 : @service_id [ Jdbc -> protocol , oracle -> subprotocol)

To get the service_id use the following sql query :
===============================

SQL > select * from global_name;

Type-2 Driver architecture :
=====================

( show diagram )

Type-2 Driver functionality :
=====================

It converts java calls into native calls.

Advantages :
=============
1. It is lilltle bit fast as compared to Type-1 driver.

2.DSN creation is not required.

Disadvantages :
=================

1. Seperate driver required for every database.

2. All databases are not having Type-2 drivers( Like MS_ACCESS).

3. Database software needs to be installed on same system.

4. It is also not suitable for applets.

5. It is only suitable for stand-alone applications not internet applications.

Note :
=====
Type - 1 (Outdated)
Type - 2 ( Rear usage)

Native calls : Database understandable calls.


Type - 3 Driver ( JDBC Network protocol driver) :
===================================

TYPE - 3 driver is also called as Middleware driver or JDBC Net Pure Java Driver.

Type - 3 drivers are developed in java language only.

It works based on connection pooling management.

Example :
=========
Weblogic RMI Driver.

RMI stands for remote method invocation.

Connection Pooling Management (CPM) :
==============================

(show diagram)

After the completion of task, again the object is placed in connection pool.

The main advantage of this is is the objects(connection) are reusable.

With server settings only, we can create the objects (Based on server hardware )

After CPM concept, this driver became popular.

Type-3 Driver Architecture :
====================

(show diagram)

It passes java instructions to middleware system.

Advantages :
============

1. Java instructions are database independent from local system to middleware system ( In Facebook which database is used, we dont know , but we load data from client local machine)

2. DSN creation is not required in local machine.

3.Database software not needed on local system.

4. It is suitable for applets.

Disadvantages :
===============

1. Extra layer added in architecture i.e., middleware system.

2. Maintenance of Network Protocol driver becomes costly because it requires database-specific coding to be done in the middle tier.

Type-4 Driver(JDBC 100 % Pure java driver)
===============================

It is also called as JDBC Native Protocol Driver (or) Thin Driver

Type-4 Driver class Name for Oracle Database :
================================
oracle.jdbc.driver.OracleDriver

URL to access driver :
================

jdbc : oracle : thin : @domain name : port-no : service_id ( thin -> logical name, domain_name -> computer name, port_number : it is used to identify the service)

To get the service_id use the following sql query :
===============================

SQL > select * from global_name;

Note :
=======

Type - 2 and Type-4 class name is same but differentiating in URL , oci8 or thin 

Type- 2 : database must be installed on same system.

Type-4 : database can be anywhere.

Type-4 driver architecture :
====================

(show diagram)

Type-4 driver functionality :
======================

It passes the java instructions directly to a database.

Advantages :
===============

1. It is a highest performance driver as compared to all other drivers.

2. DSN creation not required.

3. Database not needed on same system.

4. It is suitable for applets.

Disadvantages :
============

1. Seperate driver required for every database.


Note : 
===
If application requires more than one database then use type-3 driver otherwise use type-4 driver.

Steps to develop database application using TYPE-4 driver :
======================================

1. Loading a specific JDBC Driver

2.Establishing a connection.

3.Performing the task.

4. Closing the connection.

JDBC API :
=============

  Jdbc API is a java API, that can access any kind of tabular data especially   stored in RDBMS

  1. java.sql package

  2.javax.sql package


To connect java application with database there are 7 steps :
============================================

1. import the package.[java.sql.*]

2. Load(mysql-connector) and register the driver (Class.forName(com.mysql.jdbc.driver))

 3. Establish the connection between java application and database -> instantiating the Connection interface

  4. Create the statements -> Statement(execute the query),PreparedStatement(execute the query with dynamic values),CallableStatement(Stored Procedures)

  5. Execute the query

  6.Process the results

   7. Close the connections.


coding example :
============

import java.sql.*;

main()
{

   Class.forName(com.mysql.jdbc.driver);

   Connection con = DriverManager.getConnection("URL", "UN", "PWD")[ URL -> in dbms you may have multiple db's, which database you wanted to work is specifierd here]

   Statement stmt = con.createStatement();

   ResultSet res = stmt.executeQuery("select * from student");

   while(rs.next())    
   {

        S.O.P(rs.getInt(1)+" "+rs.getString(2));
   }

  stmt.close();
  con.close();

}

1.DDL -> create, alter, drop, truncate

2. DML -> inset, update , delete

3. DQL -> select


 Standard steps followed for developing JDBC Application :
==========================================

1. Import the java.sql.* package

2. Load  and register the driver

3.Establish the connection between java application and database

public abstract Statement createStatement() throws java.sql.SQLException;

4. Create a Statement Object.

5. Send and execute the query

6. Process the result from ResultSet

7. Close the ResultSet,Statement,Connection Objects.

sql commands :( in mysql workbench )
============

show databases;
create database advanced_java;
show databases;

use advanced_java;


create table Student(stud_id int, stud_name varchar(20), marks INT);

insert into Student values(001,"Harish",65),(002,"Ravi",75),(003,"Manjunath",87);

select * from Student;


code :
=====

package com.practice.main;


//rt.jar -> jdk s/w -> j2SE
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import com.mysql.cj.jdbc.Driver;

 class TestApp2 {

	public static void main(String[] args) throws SQLException {
		// TODO Auto-generated method stub

		 //1. Load and Register the Driver
		
		 Driver driver = new Driver();
		
	                     DriverManager.registerDriver(driver);
		
		
		//2. Establish the connection b/w java app. and database
		
		String url ="jdbc:mysql://localhost:3306/peters";
		String uname = "root";
		String pwd = "root";
		
		Connection con = DriverManager.getConnection(url,uname,pwd);
		
		//3. Creating the statement object
		Statement stmt = con.createStatement();
		
		//4. send and execute the Query
		
		  String sqlSelectQuery = "select stud_id,stud_name,marks from Student";
		
		  ResultSet rs =stmt.executeQuery(sqlSelectQuery);
		    
		  //5. Process the result from ResultSet
		    
		    System.out.println("sid \t sname\t marks");
		    while(rs.next())
		    {
		    	int sid = rs.getInt("stud_id");
		    	String sname = rs.getString("stud_name");
		    	int marks = rs.getInt("marks");
		    	
		    	System.out.println(sid+"\t "+sname+"\t "+marks);	
		    	
		    }
		    
		    //6. Closing the ResultSet,Statement and Connection Objects.
		    
		    rs.close();
		    stmt.close();
		    con.close();
		   		    
		
	}

}


Interface : collection of public static final variables and public abstract methods

interface A
{
 void abc();
}

class B implements A
{

    void abc()
   {
       ====
    }
}

my sql connector jar download -> https://dbschema.com/jdbc-driver/MySql.html


for executing the Query there were 3 methods :
====================================

1. Select commands

2. Non-select commands

  public abstract java.sql.ResultSet executeQuery(java.lang.String) throws java.sql.SQLException;

executeQuery(String) -> select Query

executeUpdate(String) -> Non select Queries

execute(String) -> Both select and non select Queries

Autoloading in JDBC :
===================

2. Load and register the driver:
==========================

-> In earlier version of JDBC 3.x we were loading and registering the driver using the following approach,

  import com.mysql.cj.jdbc.Driver;

       Driver driver = new Driver();

       DriverManager.registerDriver(driver);

-> Alternate to this approach we can also load the driver as shown below :(From JDBC 3.x to JDBC 4.x)

        Class.forName("com.mysql.cj.jdbc.Driver");


 -> We say a class represents a Driver, if  and only if the class has implemented an interface called "java.sql.Driver(I)"

    class Driver(c) implements Driver(I)
   {


   }
  
-> From JDBC 4.x onwards loading and registering would happen automatically depending upon the jar added in the classpath location of the project.

 This feature of JDBC 4.x is called as "Autoloading"

 jdbc application code in industry standard
==============================

package com.seven;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class TestApp {

	public static void main(String[] args) {
		// TODO Auto-generated method stub


		String url = "jdbc:mysql://localhost:3306/advanced_java";
		String uname = "root";
		String pwd = "root";
		
		Connection con = null;
		Statement statement = null;
		ResultSet rs = null;
		
		try
		{
				 con = DriverManager.getConnection(url,uname,pwd);
				 if(con != null)	
			     {
				     statement = con.createStatement();
				     if(statement != null)
				     { 	 
				       rs = statement.executeQuery("select * from Student");
			           if(rs != null)
			           {
			        	 System.out.println("sid \t sname\t marks");
					     while(rs.next())
					     {
					    	int sid = rs.getInt("stud_id");
					    	String sname = rs.getString("stud_name");
					    	int marks = rs.getInt("marks");
					    	
					    	System.out.println(sid+"\t "+sname+"\t "+marks);	
					    	
					    }	
			         }
			     }
			}	 
		}
		 catch(SQLException se)
		{
			 se.printStackTrace();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			if(rs != null)
			{
				try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if(statement != null)
			{
				try {
					statement.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if(con != null)
			{
				try {
					con.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		}		
		
		
		
		
	}

}

============================================================================================
DML Queries Code :
============

package com.dev;


import java.sql.*;

import com.mysql.cj.jdbc.Driver;

public class Test {

	public static void main(String[] args) throws SQLException {
		// TODO Auto-generated method stub
		
		String url = "jdbc:mysql://localhost:3306/advanced_java";
		String username = "root";
		String password = "root";
		
		

		Driver driver = new Driver();
		
		DriverManager.registerDriver(driver);
		
		Connection con = DriverManager.getConnection(url,username,password);
		
		  Statement stmt = con.createStatement();
		  
		  
		  String sqlInsertQuery = "insert into Student(stud_id,stud_name,marks) values(5,'sravan',89)";
		  String sqlUpdateQuery = "update Student set marks=80 where stud_name='Manju'";
		  String sqlDeleteQuery = "delete from Student where stud_name='Jeevan'";
		  
		  int rowsEffected = stmt.executeUpdate(sqlDeleteQuery);
		  
		  System.out.println("No of rows effected: "+rowsEffected);
		
		stmt.close();
		con.close();
		
	}

}

============================================================================
Dyamic Input Jdbc Application 
=====================

package com.dev.dynamicinput;


import java.sql.*;
import java.util.*;

public class TestDynamicInput {

	public static void main(String[] args) throws SQLException {
		// TODO Auto-generated method stub

		String url = "jdbc:mysql://localhost:3306/advanced_java";
		String username = "root";
		String password = "root";	
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the student id: ");
		int stud_id = sc.nextInt();
		System.out.println("Enter the student name: ");
    	String stud_name = sc.next();
		
		 stud_name = " ' "+stud_name+" ' ";
		
		System.out.println("Enter the student marks: ");
		int marks = sc.nextInt();
		
		
	   Connection con = DriverManager.getConnection(url,username,password);	

	   Statement stmt = con.createStatement();
	   
	   //"insert into Student(stud_id,stud_name,marks) values(5,'sravan',89)";
	   
	   String sqlInsertQuery = "insert into student(stud_id,stud_name,marks) values("+stud_id+",'"+stud_name+"',"+marks+")";
	  
	   
	   String formattedInsertQuery = String.format("insert into Student(stud_id,stud_name,marks) values(%d,%s,%d)",stud_id,stud_name,marks);
	   
	   
	   
	   //System.out.println(formattedInsertQuery);
	   
	   int rowsEffected = stmt.executeUpdate(formattedInsertQuery);
	   
	   System.out.println("No of rows effected :"+rowsEffected);		
		
		
	}

}





=============================================================================================

  All about preparedStatement
======================

Total time taken per query = Req. time + Compilation time + Execution time + Response time => 1ms + 1 ms + 1ms + 1ms = 4ms

-> Sometimes in our application, we need same query but that query has to be executed multiple time with change in inputs.

Ex : IRCTC select application query, Bookmyshow select application query.

Statement stmt = con.createStatement();

ResultSet rs = stmt.executeQuery("select command" );

-> If we use Statement object, same query will be compiled and execute everytime, this would create performance issues.

-> To resolve above problem i.e., performance issues, dont use Statement Object, instead of that use "PreparedStatement" object.(Pre-compiled Statement).

->In the case of PreparedStatement, the query will be compiled only once eventhough we are executing it multiple times with change in inputs or no change in inputs.

-> Once you send the query and keep it as backup at the database side, everytime the same query with change in input will be executed.

-> This would overall increase the performance of the application.

The signature of the PreparedStatement is :
=============================

public PreaparedStatement prepareStatement(String sqlQuery) throws SQLException;

Total time taken per query = Req. time + Execution time + Response time => 1ms + 1 ms + 1ms  = 3ms

  String SqlQuery = "select * from student where sid = ? and stud_marks = ?";
  Scanner sc = new Scanner(System.in);
  int stud_id = sc.nextInt();
  int marks = sc.nextInt();
   PreparedStatement pstmt = con.prepareStatement(Sql query);
   pstmt.setInt(1,stud_id);   
   pstmt.setInt(2, marks);

 //At this line SqlQuery will be sent to database, database engine will compile the query and stores in database.

   pstmt.executeQuery();

 The precompiled query will be sent to the java application in the form of "PreparedStatement" Object.

 Here PreparedStatement object or object reference is also called as precompiled query object.


   Assignment-1 :
===============

  Perform crud operations of database using PreparedStatement

 1. insert 2.update 3.delete 4.select   

============================================================================================

Mysql connector jar download link : https://jar-download.com/artifacts/mysql/mysql-connector-java


Resetting password in mysql:
====================
Log on to your system as Administrator.

Stop the MySQL server if it is running. For a server that is running as a Windows service, go to the Services manager: From the Start menu, select Control Panel, then Administrative Tools, then Services. Find the MySQL service in the list and stop it.

If your server is not running as a service, you may need to use the Task Manager to force it to stop.

Create a text file containing the password-assignment statement on a single line. Replace the password with the password that you want to use.

ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';

Save the file. This example assumes that you name the file C:\mysql-init.txt.

Open a console window to get to the command prompt: From the Start menu, select Run, then enter cmd as the command to be run.

Start the MySQL server with the init_file system variable set to name the file (notice that the backslash in the option value is doubled):


C:\> cd "C:\Program Files\MySQL\MySQL Server 8.3\bin"
C:\> mysqld --init-file=C:\\mysql-init.txt
If you installed MySQL to a different location, adjust the cd command accordingly.

The server executes the contents of the file named by the init_file system variable at startup, changing the 'root'@'localhost' account password.

To have server output to appear in the console window rather than in a log file, add the --console option to the mysqld command.

If you installed MySQL using the MySQL Installation Wizard, you may need to specify a --defaults-file option. For example:

C:\> mysqld
         --defaults-file="C:\\ProgramData\\MySQL\\MySQL Server 8.3\\my.ini"
         --init-file=C:\\mysql-init.txt
The appropriate --defaults-file setting can be found using the Services Manager: From the Start menu, select Control Panel, then Administrative Tools, then Services. Find the MySQL service in the list, right-click it, and choose the Properties option. The Path to executable field contains the --defaults-file setting.

After the server has started successfully, delete C:\mysql-init.txt.

You should now be able to connect to the MySQL server as root using the new password. Stop the MySQL server and restart it normally. If you run the server as a service, start it from the Windows Services window. If you start the server manually, use whatever command you normally use.


SET SQL_SAFE_UPDATES = 0;
